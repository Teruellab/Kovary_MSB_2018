% This file is automatically generated by updateModel.m from the ERK whole-cell spreadsheet.
% Model URL: ERK reactions.xlsx

%% Section 1: Declaration/initialization (code from ode_init.m)
function delta = erkOde(t,x,ode_options,v)
% - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
% delta = erkOde(t,x,ode_options,v)
% - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
% Full ERK ODE model - stiff system, designed to be solved using ode15 (see this function's help file to set
% options).  
% In phase 1 (v.PHASE == 1),simulation is run w/o stimulus, until convergence to initialize steady-state,
% - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

% Set the persistent variable that discrete-delay reactions refer to (commented out if discrete delays aren't used)
%persistent DELAY;
if isempty(t)
%     % The sim function calls the ode function once without arguments to reset persistent variables
%     sz = 5000; % Size of total delay memory - if DELAYS.idx exceeds this, function will throw error
%     DELAY.t = zeros(sz,1);
%     DELAY.nfkb = zeros(sz,1); % increase if getting errors
%     DELAY.ikbat = zeros(sz,1); % increase if getting errors
%     DELAY.idx     = 1; % index (starts at 1)
    return;
end


% Slice parameters, get previous concentrations
p = v.PARAMS;
delta = zeros(size(x));



%% Section 2: Unpack species
Raf = x(1);
RasGTP = x(2);
Raf_RasGTP = x(3);
Rafx = x(4);
Phase1 = x(5);
Rafx_Phase1 = x(6);
MEK = x(7);
MEK_Rafx = x(8);
MEKp = x(9);
MEKp_Rafx = x(10);
MEKpp = x(11);
Phase2 = x(12);
MEKpp_Phase2 = x(13);
MEKp_Phase2 = x(14);
ERK = x(15);
ERK_MEKpp = x(16);
ERKp = x(17);
ERKpp = x(18);
ERKp_MEKpp = x(19);
Phase3 = x(20);
ERKpp_Phase3 = x(21);
ERKp_Phase3 = x(22);
ERKpp_Rafx = x(23);
Rafp = x(24);
ERKpp_Raf = x(25);
Phase4 = x(26);
Rafp_Phase4 = x(27);


%% Section 3: Calculate delays (code from ode_delay.m)
% Initialize/calculate delays for discrete-delay reactions
% (Delays are manually set - if reactions are rearranged such that tau indicies change, this code 
% must be reset)



%% Section 4: Set reaction rates
rxn_1 = p(1,1) * Raf * RasGTP;
rxn_2 = p(2,1) * Raf_RasGTP;
rxn_3 = p(3,1) * Raf_RasGTP;
rxn_4 = p(4,1) * Rafx * Phase1;
rxn_5 = p(5,1) * Rafx_Phase1;
rxn_6 = p(6,1) * Rafx_Phase1;
rxn_7 = p(7,1) * MEK * Rafx;
rxn_8 = p(8,1) * MEK_Rafx;
rxn_9 = p(9,1) * MEK_Rafx;
rxn_10 = p(10,1) * MEKp * Rafx;
rxn_11 = p(11,1) * MEKp_Rafx;
rxn_12 = p(12,1) * MEKp_Rafx;
rxn_13 = p(13,1) * MEKpp * Phase2;
rxn_14 = p(14,1) * MEKpp_Phase2;
rxn_15 = p(15,1) * MEKpp_Phase2;
rxn_16 = p(16,1) * MEKp * Phase2;
rxn_17 = p(17,1) * MEKp_Phase2;
rxn_18 = p(18,1) * MEKp_Phase2;
rxn_19 = p(19,1) * ERK * MEKpp;
rxn_20 = p(20,1) * ERK_MEKpp;
rxn_21 = p(21,1) * ERK_MEKpp;
rxn_22 = p(22,1) * ERKp * MEKpp;
rxn_23 = p(23,1) * ERKp_MEKpp;
rxn_24 = p(24,1) * ERKp_MEKpp;
rxn_25 = p(25,1) * ERKpp * Phase3;
rxn_26 = p(26,1) * ERKpp_Phase3;
rxn_27 = p(27,1) * ERKpp_Phase3;
rxn_28 = p(28,1) * ERKp * Phase3;
rxn_29 = p(29,1) * ERKp_Phase3;
rxn_30 = p(30,1) * ERKp_Phase3;
rxn_31 = p(31,1) * ERKpp * Rafx;
rxn_32 = p(32,1) * ERKpp_Rafx;
rxn_33 = p(33,1) * ERKpp_Rafx;
rxn_34 = p(34,1) * ERKpp * Raf;
rxn_35 = p(35,1) * ERKpp_Raf;
rxn_36 = p(36,1) * ERKpp_Raf;
rxn_37 = p(37,1) * Rafp * Phase4;
rxn_38 = p(38,1) * Rafp_Phase4;
rxn_39 = p(39,1) * Rafp_Phase4;


%% Section 5: Set species' deltas from reactions
delta(1) = - rxn_1 - rxn_34 + rxn_2 + rxn_6 + rxn_35 + rxn_39;
delta(2) = - rxn_1 + rxn_2 + rxn_3;
delta(3) = - rxn_2 - rxn_3 + rxn_1;
delta(4) = - rxn_4 - rxn_7 - rxn_10 - rxn_31 + rxn_3 + rxn_5 + rxn_8 + rxn_9 + rxn_11 + rxn_12 + rxn_32;
delta(5) = - rxn_4 + rxn_5 + rxn_6;
delta(6) = - rxn_5 - rxn_6 + rxn_4;
delta(7) = - rxn_7 + rxn_8 + rxn_18;
delta(8) = - rxn_8 - rxn_9 + rxn_7;
delta(9) = - rxn_10 - rxn_16 + rxn_9 + rxn_11 + rxn_15 + rxn_17;
delta(10) = - rxn_11 - rxn_12 + rxn_10;
delta(11) = - rxn_13 - rxn_19 - rxn_22 + rxn_12 + rxn_14 + rxn_20 + rxn_21 + rxn_23 + rxn_24;
delta(12) = - rxn_13 - rxn_16 + rxn_14 + rxn_15 + rxn_17 + rxn_18;
delta(13) = - rxn_14 - rxn_15 + rxn_13;
delta(14) = - rxn_17 - rxn_18 + rxn_16;
delta(15) = - rxn_19 + rxn_20 + rxn_30;
delta(16) = - rxn_20 - rxn_21 + rxn_19;
delta(17) = - rxn_22 - rxn_28 + rxn_21 + rxn_23 + rxn_27 + rxn_29;
delta(18) = - rxn_25 - rxn_31 - rxn_34 + rxn_24 + rxn_26 + rxn_32 + rxn_33 + rxn_35 + rxn_36;
delta(19) = - rxn_23 - rxn_24 + rxn_22;
delta(20) = - rxn_25 - rxn_28 + rxn_26 + rxn_27 + rxn_29 + rxn_30;
delta(21) = - rxn_26 - rxn_27 + rxn_25;
delta(22) = - rxn_29 - rxn_30 + rxn_28;
delta(23) = - rxn_32 - rxn_33 + rxn_31;
delta(24) = - rxn_37 + rxn_33 + rxn_36 + rxn_38;
delta(25) = - rxn_35 - rxn_36 + rxn_34;
delta(26) = - rxn_37 + rxn_38 + rxn_39;
delta(27) = - rxn_38 - rxn_39 + rxn_37;
